<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.jiumao.wechatMall.dao.StaffDao">
    <!-- Staff的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Staff_Map" type="org.jiumao.wechatMall.entity.Staff">
        <id column="id" property="id" />
        <result column="user_name" property="userName" />
        <result column="password" property="password" />
        <result column="role_id" property="roleId" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:staff的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="staff_Column">
        staff.id as id
        ,staff.user_name as user_name
        ,staff.password as password
        ,staff.role_id as role_id
    </sql>

    <!--获得类名为:Staff对应的数据库表的数据总行数 -->
    <select id="getStaffRowCount" parameterType="org.jiumao.wechatMall.common.Assist" resultType="java.lang.Long">
        select count(id) from staff
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Staff对应数据库中表的数据集合 -->
    <select id="selectStaff" parameterType="org.jiumao.wechatMall.common.Assist"  resultMap="result_Staff_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="staff_Column" /> 
            </otherwise>
        </choose>
        from staff
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT id as primary_key FROM staff
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=staff.id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Staff对象,以参数Staff对象中不为空的属性作为条件进行查询-->
    <select id="selectStaffByObj" parameterType="org.jiumao.wechatMall.entity.Staff" resultMap="result_Staff_Map">
        select 
            <include refid="staff_Column" /> 
        from staff
        <where>
            <if test="roleId != null "> and staff.role_id = #{roleId}</if>
            <if test="password != null "> and staff.password = #{password}</if>
            <if test="userName != null "> and staff.user_name = #{userName}</if>
            <if test="id != null "> and staff.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过Staff的id获得对应数据库中表的数据对象-->
    <select id="selectStaffById" parameterType="java.lang.Object" resultMap="result_Staff_Map">
        select 
            <include refid="staff_Column" /> 
        from staff
        where staff.id = #{id}
    </select> 

    <!-- 将Staff插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertStaff" parameterType="org.jiumao.wechatMall.entity.Staff">
        insert into staff(id,user_name,password,role_id) 
        values(#{id},#{userName},#{password},#{roleId})
    </insert>

    <!-- 将Staff中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyStaff" parameterType="org.jiumao.wechatMall.entity.Staff">
        insert into staff
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="userName != null">user_name,</if>
            <if test="password != null">password,</if>
            <if test="roleId != null">role_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="userName != null"> #{userName},</if>
            <if test="password != null"> #{password},</if>
            <if test="roleId != null"> #{roleId},</if>
        </trim>
    </insert>

    <!-- 通过Staff的id将数据库表中对应的数据删除-->
    <delete id="deleteStaffById" parameterType="java.lang.Object">
        delete from staff
        where id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Staff对应的数据库表的数据删除-->
    <delete id="deleteStaff" parameterType="org.jiumao.wechatMall.common.Assist">
        delete from staff
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Staff的id将Staff的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateStaffById" parameterType="org.jiumao.wechatMall.entity.Staff">
        update staff set
            user_name=#{userName}
            ,password=#{password}
            ,role_id=#{roleId}
        where id=#{id}
    </update>

    <!-- 通过Staff的id将Staff中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyStaffById" parameterType="org.jiumao.wechatMall.entity.Staff">
        update staff
        <set>
            <if test="userName != null">
                user_name=#{userName},
            </if>
            <if test="password != null">
                password=#{password},
            </if>
            <if test="roleId != null">
                role_id=#{roleId},
            </if>
        </set>
        where id=#{id}
    </update>

    <!-- 通过辅助工具Assist中的条件将Staff中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateStaff" parameterType="map">
        update staff
        <set>
                id=#{enti.id},
                user_name=#{enti.userName},
                password=#{enti.password},
                role_id=#{enti.roleId},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Staff中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyStaff" parameterType="map">
        update staff
        <set>
            <if test="enti.id != null">
                id=#{enti.id},
            </if>
            <if test="enti.userName != null">
                user_name=#{enti.userName},
            </if>
            <if test="enti.password != null">
                password=#{enti.password},
            </if>
            <if test="enti.roleId != null">
                role_id=#{enti.roleId},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>