<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.jiumao.wechatMall.dao.RoleDao">
    <!-- Role的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Role_Map" type="org.jiumao.wechatMall.entity.Role">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="parent_id" property="parentId" />
        <result column="description" property="description" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:role的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="role_Column">
        role.id as id
        ,role.name as name
        ,role.parent_id as parent_id
        ,role.description as description
    </sql>

    <!--获得类名为:Role对应的数据库表的数据总行数 -->
    <select id="getRoleRowCount" parameterType="org.jiumao.wechatMall.common.Assist" resultType="java.lang.Long">
        select count(id) from role
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Role对应数据库中表的数据集合 -->
    <select id="selectRole" parameterType="org.jiumao.wechatMall.common.Assist"  resultMap="result_Role_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="role_Column" /> 
            </otherwise>
        </choose>
        from role
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT id as primary_key FROM role
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=role.id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Role对象,以参数Role对象中不为空的属性作为条件进行查询-->
    <select id="selectRoleByObj" parameterType="org.jiumao.wechatMall.entity.Role" resultMap="result_Role_Map">
        select 
            <include refid="role_Column" /> 
        from role
        <where>
            <if test="description != null "> and role.description = #{description}</if>
            <if test="parentId != null "> and role.parent_id = #{parentId}</if>
            <if test="name != null "> and role.name = #{name}</if>
            <if test="id != null "> and role.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过Role的id获得对应数据库中表的数据对象-->
    <select id="selectRoleById" parameterType="java.lang.Object" resultMap="result_Role_Map">
        select 
            <include refid="role_Column" /> 
        from role
        where role.id = #{id}
    </select> 

    <!-- 将Role插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertRole" parameterType="org.jiumao.wechatMall.entity.Role">
        insert into role(id,name,parent_id,description) 
        values(#{id},#{name},#{parentId},#{description})
    </insert>

    <!-- 将Role中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyRole" parameterType="org.jiumao.wechatMall.entity.Role">
        insert into role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="name != null">name,</if>
            <if test="parentId != null">parent_id,</if>
            <if test="description != null">description,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="name != null"> #{name},</if>
            <if test="parentId != null"> #{parentId},</if>
            <if test="description != null"> #{description},</if>
        </trim>
    </insert>

    <!-- 通过Role的id将数据库表中对应的数据删除-->
    <delete id="deleteRoleById" parameterType="java.lang.Object">
        delete from role
        where id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Role对应的数据库表的数据删除-->
    <delete id="deleteRole" parameterType="org.jiumao.wechatMall.common.Assist">
        delete from role
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Role的id将Role的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateRoleById" parameterType="org.jiumao.wechatMall.entity.Role">
        update role set
            name=#{name}
            ,parent_id=#{parentId}
            ,description=#{description}
        where id=#{id}
    </update>

    <!-- 通过Role的id将Role中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyRoleById" parameterType="org.jiumao.wechatMall.entity.Role">
        update role
        <set>
            <if test="name != null">
                name=#{name},
            </if>
            <if test="parentId != null">
                parent_id=#{parentId},
            </if>
            <if test="description != null">
                description=#{description},
            </if>
        </set>
        where id=#{id}
    </update>

    <!-- 通过辅助工具Assist中的条件将Role中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateRole" parameterType="map">
        update role
        <set>
                id=#{enti.id},
                name=#{enti.name},
                parent_id=#{enti.parentId},
                description=#{enti.description},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Role中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyRole" parameterType="map">
        update role
        <set>
            <if test="enti.id != null">
                id=#{enti.id},
            </if>
            <if test="enti.name != null">
                name=#{enti.name},
            </if>
            <if test="enti.parentId != null">
                parent_id=#{enti.parentId},
            </if>
            <if test="enti.description != null">
                description=#{enti.description},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>